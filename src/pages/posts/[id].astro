---
import * as Contentful from 'contentful';
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { Document } from '@contentful/rich-text-types'
import moment from 'moment';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navbar from '../../components/Navbar.astro'

type RelationType<T> = {
  sys: {
    id: string;
    linkType: Contentful.LinkType;
    type: 'Entry' | 'Asset';
  };
  fields: T
};

type Fields = {
  title: string;
  preview: string;
  subtitle: Document;
  content: Document;
  author: RelationType<{ name: string, role: string }>;
  image: RelationType<{
    title: string,
    description: string,
    file: {
      url: string,
      details: {
        size: number,
        image: {
          width: number,
          height: number
        }
      },
      fileName: string,
      contentType: string
    }
  }>;
  createdAt: string;
};

export async function getStaticPaths() {
  const getLinkedContent = (
    contentfulResponse: Contentful.EntryCollection<Fields>,
    fieldName: 'author' | 'image',
    post: Contentful.Entry<Fields>
  ) => {
    const { id, type } = post.fields[fieldName].sys;
    return contentfulResponse.includes[type]?.find(({ sys }) => sys.id === id);
  };


  const { PUBLIC_CONTENTFUL_API, PUBLIC_CONTENTFUL_SPACE } = import.meta.env;

  const client = Contentful.createClient({
    accessToken: PUBLIC_CONTENTFUL_API,
    space: PUBLIC_CONTENTFUL_SPACE
  });

  const contentfulResponse = await client.getEntries<Fields>({
    order: '-sys.createdAt',
    content_type: 'title'
  });

  const postsWithContent = contentfulResponse.items.map((item) => {
    return {
      ...item,
      fields: {
        ...item.fields,
        author: getLinkedContent(contentfulResponse, 'author', item),
        image: getLinkedContent(contentfulResponse, 'image', item),
        createdAt: moment(item.sys.createdAt).format('lll')
      }
    };
  });

  return postsWithContent.map((post) => {
    return {
      params: { id: post.sys.id },
      props: { post: post.fields }
    };
  });
  // } catch (e) {
  //   console.error(e);
  // }
}

const { post }: { post?: Fields } = Astro.props;

const rawHtmlPostContent = documentToHtmlString(post.content)

---
<BaseLayout>
  <Navbar />
  <div class="blog-post-page__container">
    <img
      class="blog-post-page__image"
      src={post.image.fields.file.url}
      alt={post.image.fields.description}
    />
    <div>{post.title}</div>
    <div> {post.subtitle}</div>
    <div>{post.createdAt}</div>
    <div>By: {post.author.fields.name}, {post.author.fields.role}</div>
    <div set:html={rawHtmlPostContent}>{post.content.content}</div>
  </div>

</BaseLayout>

<style>
  .blog-post-page__container {
    color: black;
    width: 80%;
    margin: 0 auto;
  }

  blockquote::before {
    content: ""
  }

  p {}
</style>
